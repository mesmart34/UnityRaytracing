// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
float2 PixelOffset;
int ReflectionsCount;
float PiTime;

Texture2D<float4> SkyboxTexture;
SamplerState sampler_SkyboxTexture;

RWTexture2D<float4> Result;
static const float fov = 3.14 / 3;
static const float PI = 3.14159265f;

struct Sphere
{
    float3 position;
    float radius;
    float3 color;
};

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 color;
};

StructuredBuffer<Sphere> Spheres;

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 direction = mul(CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.color = float3(0, 0, 0);
    return hit;
}

void IntersectSphere(Sphere sphere, Ray ray, inout RayHit bestHit)
{
    float3 d = ray.origin - sphere.position.xyz;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position.xyz);
    }
}

void IntersectPlane(Ray ray, inout RayHit bestHit)
{
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
    }
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        float3 specular = float3(0.9f, 0.9f, 0.9f);
        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        float3 ptd = hit.position * float3(PiTime,PiTime,PiTime);
        float3 mul = float3(cos(ptd.x), sin(ptd.y), -cos(ptd.z))*0.1;
        ray.direction = reflect(ray.direction, hit.normal + mul);
        ray.energy *= specular;
        // Return nothing
        return hit.color;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

RayHit Trace(inout Ray ray)
{
    RayHit bestHit = CreateRayHit();
    uint size, stride;
    Spheres.GetDimensions(size, stride);
    float3 result;
    IntersectPlane(ray, bestHit);
    for (uint i = 0; i < size; i++)
    {
        IntersectSphere(Spheres[i], ray, bestHit);
    }
    return bestHit;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    
    float2 uv = float2((id.xy + PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    float3 color = float3(0, 0, 0);

    for (int i = 0; i < ReflectionsCount; i++)
    {
        RayHit hit = Trace(ray);
        color += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }


    Result[id.xy] = float4(color, 1);
}
